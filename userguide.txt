Guide d'utilisation de AIT
==========================
:Author:    Nicolas Thouvenin
:Homepage:  http://ait.touv.fr[AIT home page]
:Email:     nthouvenin@gmail.com
:Key words: php, tags, store, search
:language:  php

AIT est un ensemble de classes PHP permettant le stockage et
la recherche de métadonnées. AIT se base sur 2 concepts
: des items et des tags. A partir de là, on peut stocker et effectuer
des recherches toutes informations formalisées sur ces 2 concepts.

Concrètement AIT peut être considéré simplement comme un moteur de Tag
(Tag's engine) en PHP, ou alors si on pousse le raisonnement à l'extrême,
comme un moteur générique de stockage d'information.



// ****************************************************************************
Installation
------------

AIT se présente sous forme forme d'un fichier AIT-X.Y.Z.tgz.
Ce fichier s'installe de deux manières.

Avec PEAR
~~~~~~~~~
Pour installer :
.................
$ pear install AIT-X.Y.Z.tgz 
.................

Pour désinstaller :
.................
$ pear uninstall AIT
.................

Pour mettre à jour :
............................
$ pear upgrade AIT-X.Y.Z.tgz
............................

sans PEAR
~~~~~~~~~
Il suffit de décompresser l'archive dans un répertoire
et d'ajuster la variable PHP include_path en fonction du
répertoire que vous avez choisi.

Modéle de données
-----------------

AIT traite 4 concepts qui est important de bien comprendre. A chacun des ces quatres 
concepts est associé une classe PHP :

- Les types d'items (AIT_ItemType)
- Les items (AIT_Item)
- Les types de tags (AIT_TagType)
- Les tags (AIT_Tag)

Ces 4 concepts respectent le modèle de données conceptuel suivant :

image:../vitrualmodel.png[Modéle de données virtuel]

NOTE: Le modéle de données physique ne se présente pas de cette manière

Constantes pré-définies
-----------------------

.Constantes pour le tri
[grid="all"]
`------------------------.------'-------------------------
Constante                Valeur Description
----------------------------------------------------------
ORDER_ASC (integer)      2      Demande un tri ascendant
ORDER_DESC (integer)     4		Demande un tri descendant
ORDER_BY_LABEL (integer) 8      Demande un tri sur le label
ORDER_BY_SCORE (integer) 18     Demande un tri sur le score
----------------------------------------------------------


// ****************************************************************************
Connexion/Configuration à Base de Données
-----------------------------------------
		
SGBD supportée
~~~~~~~~~~~~~~

AIT peut théoriquement fonctionner sur tous les SGBD supportés par l'extension PDO.
En pratique AIT n'a été testé qu'avec MySQL.


Pré-requis
^^^^^^^^^^^
AIT a besoin qu'une base de données soit créée peu importe son nom.


.Création d'une base de données avec Mysql
********************
CREATE DATABASE AIT;
********************


Connexion à la base de données
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

AIT utilise l'extension http://www.php.net[PHP] http://fr.php.net/pdo[PDO].
Pour se connecter à la base on utilise donc une chaîne de connexion PDO.

La méthode AIT::connect prend les même paramètres que 
http://fr.php.net/manual/fr/pdo.construct.php[le constructeur] de l'objet PDO.

Synopsis
++++++++

    PDO  connect(string $dsn, string $username = 'root', string $password= '', array $driver_options=array(), array $ait_options=array())

Description
+++++++++++

Méthode statique permettant de se connecter à une base de données.

Paramètres
++++++++++

string *$dsn*:: chaine de connexion 
string *$username*:: user de connexion 
string *$password*:: mot de passe de connexion 
array *$driver_options*:: options pour pdo 
array *$ait_options*:: options pour pdo


Retour
++++++

Un objet AITPDO qui dérive l'objet PDO.

Exemple
+++++++

[source]
-------------------------------------------------
include::./examples/AIT-connect.php[]
-------------------------------------------------

WARNING: IL n'est pas possible d'utiliser directement un objet PDO. AIT pour fonctionner
utilise un objet spécifique dérivé de l'objet PDO.


Création et contrôle de la structure de données
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AIT contrôle et créé la structure de données nécessaire à son bon fonctionnement
de manière automatique à condition de faire appel à la méthode checkup.

[source]
-------------------------------------------------
$cnxstr = 'mysql:host=localhost;dbname=music';
$db = AIT::connect($cnxstr, 'root');
$db->checkup();
-------------------------------------------------

// ****************************************************************************
Les erreurs et leur gestion
---------------------------

AIT fait appel à la fonction PHP http://fr2.php.net/trigger_error[trigger_error]
à chaque fois qu'une erreur est rencontrée. Le niveau d'erreur est toujours E_USER_ERROR.
A chaque fois que AIT rencontre une erreur l'exécution du code est donc stoppé.

// ****************************************************************************
Debugger
--------

AIT posséde un mode *debugging* qui permet notamenent d'afficher les réquetes SQL envoyés à
 la base. Ce mode peut-être activé et désactivé globalement ou ponctuellement. Dans ce dernier
 cas, seule les requêtes produitent entre le moment ou le mode debug est activé et le moment 
ou il est désactivé seront affichées.


.Debug ponctuel

[source,php]
-------------------------------------------------
AIT::$debugging = true;
jazz = $schema->style->getTag('Jazz');
AIT::$debugging = false;
-------------------------------------------------



// ****************************************************************************
Développement
-------------

Modification & Ajout
~~~~~~~~~~~~~~~~~~~~

Le code source de AIT est disponible sur Github.com : http://github.com/touv/ait/tree/master


Tests Unitaires
~~~~~~~~~~~~~~~

Le développement d'AIT est piloté par les tests unitaires. Pour cela on utilise http://www.phpunit.de/[PHPUnit]


.Pour tester le code :
----------------------------
% phpunit AITTest.php
% phpunit AITExtentedTest.php
-----------------------------


Bien évidement si l'on ajoute une fonctionnalité celle-ci devra posséder son propre test.



// ****************************************************************************
Références des classes
----------------------

Le cœur d'AIT est composé de 4 classes de bases qui hérite d'une seul classe mère.

// ============================================================================

AITPDO
~~~~~~

Cette classe permet de pointer sur la base données que l'on souhaite utiliser.

// include::./AITPDO.txt[]

// ============================================================================
AITSchema
~~~~~~~~~

Cette classe permet de créer et de manipuler des schémas de données.

include::./AITSchema.txt[]


// ============================================================================
AITQuery
~~~~~~~~

Cette classe permet de créer des requêtes avancées pour trouver des items.

include::./AITQuery.txt[]


// ============================================================================
AIT_ItemType
~~~~~~~~~~~

Cette classe permet de manipuler un TYPE d'ITEM.

include::./AIT/ItemType.txt[]


// ============================================================================
AIT_Item
~~~~~~~~

Cette classe permet de manipuler un ITEM.

include::./AIT/Item.txt[]


// ============================================================================
AIT_TagType
~~~~~~~~~~~

Cette classe permet de manipuler un "type de tag".

include::./AIT/TagType.txt[]


// ============================================================================
AIT_Tag
~~~~~~~

Cette classe permet de manipuler un TAG.

include::./AIT/Tag.txt[]

Maintenance
-----------

Voici quelques requêtes SQL permettant de contrôler l'état d'un base AIT :

Contrôler la cohérence de la base
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Voici quelques requêtes pour vérifier que des lignes les jointures entre tag soit toujours vrai.

.État des jointures

[source,sql]
----------------------------
SELECT tagged.* FROM tagged LEFT JOIN tag ON tagged.item_id=tag.id WHERE tag.id IS NULL 
SELECT tagged.* FROM tagged LEFT JOIN tag ON tagged.tag_id=tag.id WHERE tag.id IS NULL 
SELECT a.* FROM tag a LEFT JOIN tag b ON a.type=b.id WHERE a.id <> 1 and a.id <> 2 and b.id IS NULL 
-----------------------------

Visualiser les tags non utilisés
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

C'est à dire les tags non associés à un item.

.uniquement sur les fréquences 

[source,sql]
-----------------------------
SELECT * 
FROM tag a LEFT JOIN tag b ON a.type=b.id 
WHERE b.type=2 and a.frequency=0
-----------------------------

.avec les fréquences et les associations

[source,sql]
-----------------------------
SELECT * 
FROM tag a LEFT JOIN tag b ON a.type=b.id LEFT JOIN tagged c ON a.id=c.tag_id 
WHERE b.type=2 and a.frequency=0 and item_id IS NULL
-----------------------------

.uniquement avec les associations

[source,sql]
-----------------------------
SELECT * 
FROM tag a LEFT JOIN tag b ON a.type=b.id LEFT JOIN tagged c ON a.id=c.tag_id 
WHERE b.type=2 and item_id IS NULL
-----------------------------

Visualiser les items non utilisés
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C'est à dire les items ne possédant aucun tag.

.uniquement avec les associations 

[source,sql]
-----------------------------
SELECT * 
FROM tag a LEFT JOIN tag b ON a.type=b.id LEFT JOIN tagged c ON a.id=c.item_id 
WHERE b.type=1 and c.tag_id IS NULL
-----------------------------


§§§


// vim: set syntax=asciidoc encoding=utf8 spl=fr:
